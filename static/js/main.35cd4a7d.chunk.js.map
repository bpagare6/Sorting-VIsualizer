{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingAlgorithms/HeapSort.js","SortingAlgorithms/BubbleSort.js","SortingAlgorithms/InsertionSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimation","array","animations","length","mergeSort","start_idx","end_idx","middle_idx","Math","floor","i","j","push","value","index","merge","getQuickSortAnimation","quickSort","pivot","temp","smaller_idx","larger_idx","partition","getHeapSortAnimation","number_elements","heapify","swap","heapSort","largest","l","r","idx_1","idx_2","getBubbleSortAnimation","a","b","bubbleSort","getInsertionSortAnimation","insertionSort","SortingVisualizer","props","resetarray","state","number_array_bars","min","max","random","setState","array_bars","document","getElementsByClassName","bar_style","style","setTimeout","backgroundColor","primary_color","handleSliderChange","event","target","animation_speed","handleSelectionChange","active","mergeSortAnimation","is_running","change_color","animation","bar_one_idx","bar_two_idx","bar_one_style","bar_two_style","console","log","color","comparison_color","bar_idx","new_height","height","bar_sorted_style","sorted_color","quickSortAnimation","bar_last_sorted_style","heapSortAnimation","bubbleSortAnimation","insertionSortAnimation","is_visualize_active","current_animation","this","width","window","innerWidth","className","map","idx","key","Navbar","collapseOnSelect","expand","variant","fixed","Collapse","id","Nav","Button","onClick","disabled","type","onChange","getElementById","setAttribute","React","Component","App","Helmet","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.35cd4a7d.chunk.js","sourcesContent":["export default function getMergeSortAnimation(array) {\n    const animations = [];\n    // If array is of length 1 or less it is already sorted\n    if (array.length <= 1) return array;\n    // Sort the array using merge-sort\n    mergeSort(array, 0, array.length-1, animations);\n    return animations;    \n}\n\nfunction mergeSort(array, start_idx, end_idx, animations) {\n    // If start index and end index matches,\n    // Then array is of only length 1 so it is sorted\n    if (start_idx === end_idx) return;\n    // Calculate the middle index as breaking point\n    const middle_idx = Math.floor((start_idx + end_idx) / 2);\n    // Sort from start to middle\n    mergeSort(array, start_idx, middle_idx, animations);\n    // Sort from middle to end\n    mergeSort(array, middle_idx + 1, end_idx, animations);\n    // Merge the result\n    merge(array, start_idx, middle_idx, end_idx, animations);\n}\n\nfunction merge(array, start_idx, middle_idx, end_idx, animations) {\n    let i = start_idx;\n    let j = middle_idx + 1;\n    // If the direct merge is already sorted\n    if (array[middle_idx] <= array[j]) { \n        return;\n    } \n    // Two pointers to maintain start of both arrays to merge \n    while (i <= middle_idx && j <= end_idx) { \n        // Push the comparison animations to show color change\n        animations.push(['compare', i, j]);\n        // Push the comparison animations to change color back\n        animations.push(['compare', i, j]);\n        // If element 1 is in right place\n        if (array[i] <= array[j]) { \n            i++;\n        } else { \n            let value = array[j]; \n            let index = j;\n            // Shift all the elements between element 1 element 2, right by 1. \n            while (index !== i) {\n                // Show the shift animation\n                animations.push(['change-height', index, array[index-1]]);\n                array[index] = array[index - 1]; \n                index--; \n            }\n            // Show the shift animation\n            animations.push(['change-height', i, value]);\n            array[i] = value; \n            // Update all the pointers \n            i++; middle_idx++; j++;\n        } \n    } \n}","export default function getQuickSortAnimation(array) {\n    const animations = [];\n    // If array is of length 1 or less it is already sorted\n    if (array.length <= 1) return array;\n    // Sort the array using insertion-sort\n    quickSort(array, 0, array.length, animations);\n    return animations;    \n}\n\nfunction quickSort(array, start_idx, end_idx, animations) {\n    // Base case: empty array or array with only 1 element\n    if (end_idx - start_idx <= 1)\n        return;\n    // Returns the position of pivot\n    let pivot = partition(array, start_idx, end_idx, animations);\n    quickSort(array, start_idx, pivot, animations);\n    quickSort(array, pivot + 1, end_idx, animations);\n    // Elements are sorted\n    for (let i = start_idx; i < pivot; i++) {\n        animations.push(['sorted', i]);\n    }\n    for (let i = pivot; i < end_idx; i++) {\n        animations.push(['sorted', i]);\n    }\n}\n\nfunction partition(array, start_idx, end_idx, animations) {\n    let pivot;\n    let temp;\n    let smaller_idx, larger_idx;\n    smaller_idx = start_idx;\n    larger_idx = end_idx - 1;\n    // Pivot is initially at end_idx - 1\n    pivot = array[end_idx - 1];\n\n    // Loop till division point is found\n    while (larger_idx > smaller_idx) {\n        // Push comparison animations for changing colors\n        animations.push(['compare', larger_idx - 1, end_idx - 1]);\n        animations.push(['compare', larger_idx - 1, end_idx - 1]);\n        if (array[larger_idx - 1] > pivot) {\n            // Move a[larger_idx - 1] to the pivot position and move the pivot down\n            animations.push(['change-height', larger_idx, array[larger_idx - 1]]);\n            array[larger_idx] = array[larger_idx - 1];\n            larger_idx--;\n        } else {\n            // Swap smaller_idx and larger_idx - 1 elements and move smaller_idx up\n            temp = array[larger_idx - 1];\n            array[larger_idx - 1] = array[smaller_idx];\n            array[smaller_idx] = temp;\n            animations.push(['change-height', larger_idx - 1, array[larger_idx - 1]]);\n            animations.push(['change-height', smaller_idx, array[smaller_idx]]);\n            smaller_idx++;\n        }\n    }\n    // Put pivot value\n    animations.push(['change-height', larger_idx, pivot]);\n    array[larger_idx] = pivot;\n    return larger_idx;\n}","export default function getHeapSortAnimation(array) {\n    const animations = [];\n    // If array is of length 1 or less it is already sorted\n    if (array.length <= 1) return array;\n    // Sort the array using insertion-sort\n    heapSort(array, array.length, animations);\n    return animations;    \n}\n\nfunction heapSort(array, number_elements, animations) {\n    // Build heap (rearrange array) \n    for (let i = number_elements / 2 - 1; i >= 0; i--) \n        heapify(array, number_elements, i, animations);\n    // One by one extract an element from heap \n    for (let i = number_elements - 1; i > 0; i--) { \n        // Move current root to end \n        swap(array, 0, i, animations);\n        // Sorted element\n        animations.push(['sorted', i]);\n        // call max heapify on the reduced heap \n        heapify(array, i, 0, animations);\n    }\n    animations.push(['sorted', 0]);\n}\n\nfunction heapify(array, number_elements, i, animations) { \n    let largest = i; // Initialize largest as root \n    let l = 2*i + 1; // left = 2*i + 1 \n    let r = 2*i + 2; // right = 2*i + 2 \n    // If left child is larger than root\n    if (l < number_elements && array[l] > array[largest]) {\n        animations.push(['compare', l, largest]);\n        animations.push(['compare', l, largest]);\n        largest = l;\n    }\n    // If right child is larger than largest so far \n    if (r < number_elements && array[r] > array[largest]) { \n        animations.push(['compare', r, largest]);\n        animations.push(['compare', r, largest]);\n        largest = r;\n    }\n    // If largest is not root \n    if (largest !== i) {\n        swap(array, i, largest, animations); \n        // Recursively heapify the affected sub-tree \n        heapify(array, number_elements, largest, animations); \n    }\n} \n\nfunction swap(array, idx_1, idx_2, animations) {\n    // Swapping two elements with given indexes\n    let temp = array[idx_2];\n    array[idx_2] = array[idx_1];\n    array[idx_1] = temp;\n    // Adding swap animation for changing height\n    animations.push(['change-height', idx_1, array[idx_1]]);\n    animations.push(['change-height', idx_2, array[idx_2]]);\n}","export default function getBubbleSortAnimation(array) {\n    const animations = [];\n    // If array is of length 1 or less it is already sorted\n    if (array.length <= 1) return array;\n    // Sort the array using bubble-sort\n    bubbleSort(array, 0, array.length-1, animations);\n    return animations;    \n}\n\nfunction bubbleSort(array, start_idx, end_idx, animations) {\n    for (let i = start_idx; i <= end_idx; i++) {\n        for (let j = start_idx; j <= end_idx-i-1; ++j) {\n            // Animation showing comparison of two elements to show color\n            animations.push(['compare', j, j+1]);\n            // Animation showing comparison of two elements to change color back\n            animations.push(['compare', j, j+1]);\n            let a = array[j];\n            let b = array[j+1];\n            // If element a is larger then swap with b\n            if (a > b) {\n                swap(array, j, j+1, animations);\n            }\n        }\n        animations.push(['sorted', end_idx - i]);\n    }\n}\n\nfunction swap(array, idx_1, idx_2, animations) {\n    // Swapping two elements with given indexes\n    let temp = array[idx_2];\n    array[idx_2] = array[idx_1];\n    array[idx_1] = temp;\n    // Adding swap animation for changing height\n    animations.push(['change-height', idx_1, array[idx_1]]);\n    animations.push(['change-height', idx_2, array[idx_2]]);\n}","export default function getInsertionSortAnimation(array) {\n    const animations = [];\n    // If array is of length 1 or less it is already sorted\n    if (array.length <= 1) return array;\n    // Sort the array using insertion-sort\n    insertionSort(array, 0, array.length-1, animations);\n    return animations;    \n}\n\nfunction insertionSort(array, start_idx, end_idx, animations) {\n    for (let i = start_idx; i <= end_idx; i++) {\n        for (let j = i; j >= start_idx + 1; --j) {\n            // Animation showing comparison of two elements to show color\n            animations.push(['compare', j, j-1]);\n            // Animation showing comparison of two elements to change color back\n            animations.push(['compare', j, j-1]);\n            let a = array[j];\n            let b = array[j-1];\n            // If element a is smaller then swap with b\n            if (a < b) {\n                swap(array, j, j-1, animations);\n            } else {\n                break;\n            }\n        }\n    }\n}\n\nfunction swap(array, idx_1, idx_2, animations) {\n    // Swapping two elements with given indexes\n    let temp = array[idx_2];\n    array[idx_2] = array[idx_1];\n    array[idx_1] = temp;\n    // Adding swap animation for changing height\n    animations.push(['change-height', idx_1, array[idx_1]]);\n    animations.push(['change-height', idx_2, array[idx_2]]);\n}","import React from 'react';\nimport './SortingVisualizer.css';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Button from 'react-bootstrap/Button';\nimport getMergeSortAnimation from '../SortingAlgorithms/MergeSort.js';\nimport getQuickSortAnimation from '../SortingAlgorithms/QuickSort.js';\nimport getHeapSortAnimation from '../SortingAlgorithms/HeapSort.js';\nimport getBubbleSortAnimation from '../SortingAlgorithms/BubbleSort.js';\nimport getInsertionSortAnimation from '../SortingAlgorithms/InsertionSort.js';\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            number_array_bars: 100,\n            is_visualize_active: false,\n            is_running: false,\n            current_animation: null,\n            animation_speed: 10,\n            primary_color: 'rgba(66, 134, 244, 0.8)',\n            comparison_color: 'red',\n            sorted_color: 'rgba(162, 92, 232, 0.8)',\n        };\n    }\n\n    componentDidMount() {\n        this.resetarray();\n    }\n\n    resetarray = async () => {\n        const array = [];\n        for (let i = 0; i < this.state.number_array_bars; i++) {\n            array.push(randomIntFromInterval(10, 730));\n        }\n        await this.setState({ array });\n        const array_bars = document.getElementsByClassName('array-bar');\n        for (let i = 0; i < array_bars.length; i++) {\n            const bar_style = array_bars[i].style;\n            setTimeout(() => {\n                bar_style.backgroundColor = this.state.primary_color;\n            }, 1);\n        }\n    }\n\n    handleSliderChange = async (event) => {\n        const number_array_bars = event.target.value;\n        const animation_speed = 1000 / number_array_bars;\n        await this.setState({ number_array_bars, animation_speed });\n        this.resetarray();\n    };\n\n    handleSelectionChange = async (event) => {\n        this.setState({ active: event });\n    }\n\n    mergeSortAnimation = async () => {\n        await this.setState({ is_running: true });\n        const animations = getMergeSortAnimation(this.state.array);\n        var change_color = true;\n        for (let i = 0; i < animations.length; i++) {\n            const array_bars = document.getElementsByClassName('array-bar');\n            const animation = animations[i];\n            if (animation[0] === 'compare') {\n                const bar_one_idx = animation[1];\n                const bar_two_idx = animation[2];\n                const bar_one_style = array_bars[bar_one_idx].style;\n                const bar_two_style = array_bars[bar_two_idx].style;\n                console.log(bar_one_style.backgroundColor);\n                const color = change_color ? this.state.comparison_color : this.state.primary_color;\n                change_color = change_color ? false : true;\n                setTimeout(() => {\n                    bar_one_style.backgroundColor = color;\n                    bar_two_style.backgroundColor = color;\n                }, i * this.state.animation_speed);\n            } else {\n                const bar_idx = animation[1];\n                const new_height = animation[2];\n                const bar_style = array_bars[bar_idx].style;\n                setTimeout(() => {\n                    bar_style.height = `${new_height}px`;\n                }, i * this.state.animation_speed);\n            }\n        }\n        const array_bars = document.getElementsByClassName('array-bar');\n        for (let i = 0; i < array_bars.length; i++) {\n            const bar_sorted_style = array_bars[i].style;\n            setTimeout(() => {\n                bar_sorted_style.backgroundColor = this.state.sorted_color;\n            }, (animations.length + i) * this.state.animation_speed);\n        }\n        await setTimeout(() => {\n            this.setState({ is_running: false });\n        }, (animations.length + array_bars.length) * this.state.animation_speed);\n    }\n\n    quickSortAnimation = async () => {\n        await this.setState({ is_running: true });\n        const animations = getQuickSortAnimation(this.state.array);\n        var change_color = true;\n        for (let i = 0; i < animations.length; i++) {\n            const array_bars = document.getElementsByClassName('array-bar');\n            const animation = animations[i];\n            if (animation[0] === 'compare') {\n                const bar_one_idx = animation[1];\n                const bar_two_idx = animation[2];\n                const bar_one_style = array_bars[bar_one_idx].style;\n                const bar_two_style = array_bars[bar_two_idx].style;\n                console.log(bar_one_style.backgroundColor);\n                const color = change_color ? this.state.comparison_color : this.state.primary_color;\n                change_color = change_color ? false : true;\n                setTimeout(() => {\n                    bar_one_style.backgroundColor = color;\n                    bar_two_style.backgroundColor = color;\n                }, i * this.state.animation_speed);\n            } else if (animation[0] === 'change-height') {\n                const bar_one_idx = animation[1];\n                const new_height = animation[2];\n                const bar_one_style = array_bars[bar_one_idx].style;\n                setTimeout(() => {\n                    bar_one_style.height = `${new_height}px`;\n                }, i * this.state.animation_speed);\n            } else {\n                const bar_idx = animation[1];\n                const bar_last_sorted_style = array_bars[bar_idx].style;\n                setTimeout(() => {\n                    bar_last_sorted_style.backgroundColor = this.state.sorted_color;\n                }, i * this.state.animation_speed);\n            }\n        }\n        await setTimeout(() => {\n            this.setState({ is_running: false });\n        }, (animations.length) * this.state.animation_speed);\n    }\n\n    heapSortAnimation = async () => {\n        await this.setState({ is_running: true });\n        const animations = getHeapSortAnimation(this.state.array);\n        var change_color = true;\n        for (let i = 0; i < animations.length; i++) {\n            const array_bars = document.getElementsByClassName('array-bar');\n            const animation = animations[i];\n            if (animation[0] === 'compare') {\n                const bar_one_idx = animation[1];\n                const bar_two_idx = animation[2];\n                const bar_one_style = array_bars[bar_one_idx].style;\n                const bar_two_style = array_bars[bar_two_idx].style;\n                console.log(bar_one_style.backgroundColor);\n                const color = change_color ? this.state.comparison_color : this.state.primary_color;\n                change_color = change_color ? false : true;\n                setTimeout(() => {\n                    bar_one_style.backgroundColor = color;\n                    bar_two_style.backgroundColor = color;\n                }, i * this.state.animation_speed);\n            } else if (animation[0] === 'change-height') {\n                const bar_one_idx = animation[1];\n                const new_height = animation[2];\n                const bar_one_style = array_bars[bar_one_idx].style;\n                setTimeout(() => {\n                    bar_one_style.height = `${new_height}px`;\n                }, i * this.state.animation_speed);\n            } else {\n                const bar_idx = animation[1];\n                const bar_last_sorted_style = array_bars[bar_idx].style;\n                setTimeout(() => {\n                    bar_last_sorted_style.backgroundColor = this.state.sorted_color;\n                }, i * this.state.animation_speed);\n            }\n        }\n        await setTimeout(() => {\n            this.setState({ is_running: false });\n        }, (animations.length) * this.state.animation_speed);\n    }\n\n    bubbleSortAnimation = async () => {\n        await this.setState({ is_running: true });\n        const animations = getBubbleSortAnimation(this.state.array);\n        var change_color = true;\n        for (let i = 0; i < animations.length; i++) {\n            const array_bars = document.getElementsByClassName('array-bar');\n            const animation = animations[i];\n            if (animation[0] === 'compare') {\n                const bar_one_idx = animation[1];\n                const bar_two_idx = animation[2];\n                const bar_one_style = array_bars[bar_one_idx].style;\n                const bar_two_style = array_bars[bar_two_idx].style;\n                console.log(bar_one_style.backgroundColor);\n                const color = change_color ? this.state.comparison_color : this.state.primary_color;\n                change_color = change_color ? false : true;\n                setTimeout(() => {\n                    bar_one_style.backgroundColor = color;\n                    bar_two_style.backgroundColor = color;\n                }, i * this.state.animation_speed);\n            } else if (animation[0] === 'change-height') {\n                const bar_one_idx = animation[1];\n                const new_height = animation[2];\n                const bar_one_style = array_bars[bar_one_idx].style;\n                setTimeout(() => {\n                    bar_one_style.height = `${new_height}px`;\n                }, i * this.state.animation_speed);\n            } else {\n                const bar_idx = animation[1];\n                const bar_last_sorted_style = array_bars[bar_idx].style;\n                setTimeout(() => {\n                    bar_last_sorted_style.backgroundColor = this.state.sorted_color;\n                }, i * this.state.animation_speed);\n            }\n        }\n        await setTimeout(() => {\n            this.setState({ is_running: false });\n        }, (animations.length) * this.state.animation_speed);\n    }\n\n    insertionSortAnimation = async () => {\n        await this.setState({ is_running: true });\n        const animations = getInsertionSortAnimation(this.state.array);\n        var change_color = true;\n        for (let i = 0; i < animations.length; i++) {\n            const array_bars = document.getElementsByClassName('array-bar');\n            const animation = animations[i];\n            if (animation[0] === 'compare') {\n                const bar_one_idx = animation[1];\n                const bar_two_idx = animation[2];\n                const bar_one_style = array_bars[bar_one_idx].style;\n                const bar_two_style = array_bars[bar_two_idx].style;\n                console.log(bar_one_style.backgroundColor);\n                const color = change_color ? this.state.comparison_color : this.state.primary_color;\n                change_color = change_color ? false : true;\n                setTimeout(() => {\n                    bar_one_style.backgroundColor = color;\n                    bar_two_style.backgroundColor = color;\n                }, i * this.state.animation_speed);\n            } else {\n                const bar_one_idx = animation[1];\n                const new_height = animation[2];\n                const bar_one_style = array_bars[bar_one_idx].style;\n                setTimeout(() => {\n                    bar_one_style.height = `${new_height}px`;\n                }, i * this.state.animation_speed);\n            }\n        }\n        const array_bars = document.getElementsByClassName('array-bar');\n        for (let i = 0; i < array_bars.length; i++) {\n            const bar_sorted_style = array_bars[i].style;\n            setTimeout(() => {\n                bar_sorted_style.backgroundColor = this.state.sorted_color;\n            }, (animations.length + i) * this.state.animation_speed);\n        }\n        await setTimeout(() => {\n            this.setState({ is_running: false });\n        }, (animations.length + array_bars.length) * this.state.animation_speed);\n    }\n\n    render() {\n        const { array, number_array_bars, is_running, is_visualize_active, primary_color } = this.state;\n        const width = Math.floor(window.innerWidth / (number_array_bars * 3));\n\n        return (\n            <div className=\"sorting-visualizer\">\n                <div className=\"bars\">\n                    {array.map((value, idx) => (\n                        <div\n                            className=\"array-bar\"\n                            key={idx}\n                            style={{\n                                backgroundColor: primary_color,\n                                height: `${value}px`,\n                                width: `${width}px`,\n                            }}></div>\n                    ))}\n                </div>\n                <Navbar collapseOnSelect expand=\"lg\" variant=\"light\" className=\"color-nav\" fixed=\"bottom\">\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\n                        <Nav className=\"navoption\">\n                            <Button className=\"options\" onClick={this.resetarray} \n                                    disabled={is_running ? \"disabled\" : null}>Create new array</Button>\n                        </Nav>\n                        <div className=\"seperator\"></div>\n                        <Nav className=\"navoption\">\n                            <Button className=\"sizeoption\" disabled={is_running ? \"disabled\" : null}>\n                                Change array size &amp; Sorting speed\n                            </Button>\n                            <div className=\"slider-container\">\n                                <input className=\"slider\" type=\"range\" min=\"10\" max=\"300\" \n                                        value={number_array_bars} onChange={this.handleSliderChange} \n                                        disabled={is_running ? \"disabled\" : null} />\n                            </div>\n                        </Nav>\n                        <div className=\"seperator\"></div>\n                        <Nav className=\"navoption\">\n                            <Button className=\"visualize\" onClick={this.state.current_animation}\n                                        disabled={is_running || !is_visualize_active ? \"disabled\" : null}>\n                                Visualize\n                            </Button>\n                        </Nav>\n                        <div className=\"seperator\"></div>\n                        <Nav className=\"navoption\">\n                            <Button id=\"merge-sort\" className=\"options\" onClick={async () => {\n                                await this.setState(\n                                    { current_animation: this.mergeSortAnimation, is_visualize_active: true });\n                                if (this.state.active)\n                                    document.getElementById(this.state.active).setAttribute(\"style\", \"background-color: none !important\");\n                                this.handleSelectionChange(\"merge-sort\");\n                                document.getElementById(\"merge-sort\").setAttribute(\"style\", \"background-color: #BA3A47 !important\");\n                            }} disabled={is_running ? \"disabled\" : null}>Merge Sort</Button>\n                        </Nav>\n                        <Nav className=\"navoption\">\n                            <Button id=\"quick-sort\" className=\"options\" onClick={async () => {\n                                await this.setState(\n                                    { current_animation: this.quickSortAnimation, is_visualize_active: true });\n                                if (this.state.active)\n                                    document.getElementById(this.state.active).setAttribute(\"style\", \"background-color: none !important\");\n                                this.handleSelectionChange(\"quick-sort\");\n                                document.getElementById(\"quick-sort\").setAttribute(\"style\", \"background-color: #BA3A47 !important\");\n                            }} disabled={is_running ? \"disabled\" : null}>Quick Sort</Button>\n                        </Nav>\n                        <Nav className=\"navoption\">\n                            <Button id=\"heap-sort\" className=\"options\" onClick={async () => {\n                                await this.setState(\n                                    { current_animation: this.heapSortAnimation, is_visualize_active: true });\n                                if (this.state.active)\n                                    document.getElementById(this.state.active).setAttribute(\"style\", \"background-color: none !important\");\n                                this.handleSelectionChange(\"heap-sort\");\n                                document.getElementById(\"heap-sort\").setAttribute(\"style\", \"background-color: #BA3A47 !important\");\n                            }} disabled={is_running ? \"disabled\" : null}>Heap Sort</Button>\n                        </Nav>\n                        <Nav className=\"navoption\">\n                            <Button id=\"bubble-sort\" className=\"options\" onClick={async () => {\n                                await this.setState(\n                                    { current_animation: this.bubbleSortAnimation, is_visualize_active: true });\n                                if (this.state.active)\n                                    document.getElementById(this.state.active).setAttribute(\"style\", \"background-color: none !important\");\n                                this.handleSelectionChange(\"bubble-sort\");\n                                document.getElementById(\"bubble-sort\").setAttribute(\"style\", \"background-color: #BA3A47 !important\");\n                            }} disabled={is_running ? \"disabled\" : null}>Bubble Sort</Button>\n                        </Nav>\n                        <Nav className=\"navoption\">\n                            <Button id=\"insertion-sort\" className=\"options\" onClick={async () => {\n                                await this.setState(\n                                    { current_animation: this.insertionSortAnimation, is_visualize_active: true });\n                                if (this.state.active)\n                                    document.getElementById(this.state.active).setAttribute(\"style\", \"background-color: none !important\");\n                                this.handleSelectionChange(\"insertion-sort\");                          \n                                document.getElementById(\"insertion-sort\").setAttribute(\"style\", \"background-color: #BA3A47 !important\");\n                            }} disabled={is_running ? \"disabled\" : null}>Insertion Sort</Button>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n        );\n    }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","import React from 'react';\nimport './App.css';\nimport {Helmet} from \"react-helmet\";\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <title>Sorting Visualizer</title>\n      </Helmet>\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}